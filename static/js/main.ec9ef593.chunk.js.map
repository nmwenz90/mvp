{"version":3,"sources":["app/api/agent.js","app/stores/userStore.js","app/common/util/util.js","app/stores/wordStore.js","app/stores/commonStore.js","app/stores/sentenceStore.js","app/stores/rootStore.js","app/common/form/ErrorMessage.jsx","app/common/form/TextInput.jsx","features/user/LoginForm.jsx","features/navbar/NavBar.jsx","app/layout/LoadingComponent.jsx","features/home/HomePageHeader.jsx","features/home/HomePageInfo.jsx","features/footer/Footer.jsx","features/home/HomePage.jsx","app/layout/NotFound.jsx","app/common/form/DateInput.jsx","features/user/RegisterForm.jsx","features/word-count/WordCountTable.jsx","features/word-count/WordCountComponent.jsx","features/word-bank/WordBankListItem.jsx","features/word-bank/WordBankList.jsx","features/word-bank/WordBankSentence.jsx","features/word-bank/WordBankComponent.jsx","app/layout/App.js","serviceWorker.js","app/layout/ScrollToTop.jsx","index.js"],"names":["axios","defaults","baseURL","interceptors","response","use","undefined","error","status","config","data","console","log","JSON","stringify","message","toast","history","push","method","responseBody","requests","url","get","then","body","post","User","current","login","user","register","WordBank","list","details","id","categories","WordCount","add","sentence","UserStore","rootStore","values","a","agent","runInAction","getUser","logout","this","decorate","observable","action","isLoggedIn","computed","categoryToColor","adjectives","interjections","nouns","prepositions","pronouns","verbs","matchCategoryToIdx","word","category","category_idx","category_name","WordStore","loading","wordRegistry","Map","wordCountRegistry","loadCategories","categoriesFromBackEnd","loadWords","wordBank","forEach","set","word_idx","loadWord","getWord","clearWord","loadWordCount","userStore","wordCount","words","wordsSorted","sort","b","localeCompare","Object","entries","reduce","groupWordsByCategory","Array","from","wordsByCategories","CommonStore","appLoaded","setAppLoaded","SentenceStore","addToSentence","clearSentence","addWordCount","RootStoreContext","createContext","wordStore","commonStore","ErrorMessage","text","Message","Header","statusText","content","TextInput","input","width","type","placeholder","meta","touched","label","Form","Field","inline","Input","fluid","focus","Label","basic","color","isValidEmail","createValidator","value","test","validate","combineValidators","email","composeValidators","isRequired","password","LoginForm","useContext","Container","style","marginTop","onSubmit","catch","FORM_ERROR","render","handleSubmit","submitting","submitError","invalid","pristine","dirtySinceLastSubmit","as","textAlign","name","component","Button","disabled","backgroundColor","href","observer","useState","activeItem","setActiveItem","handleItemClick","e","Segment","Menu","fixed","inverted","size","Item","header","NavLink","exact","to","active","onClick","marginLeft","Image","src","alt","circular","spaced","position","Dropdown","pointing","displayName","icon","compact","LoadingComponent","Dimmer","Loader","HomePageHeader","Grid","padded","relaxed","Row","centered","Column","verticalAlign","fontSize","HomePageInfo","margin","columns","padding","Link","Footer","top","HomePage","className","NotFound","paddingTop","paddingBottom","Icon","Inline","primary","formats","DateInput","parse","onChange","onBlur","time","max","Date","first_name","last_name","dob","RegisterForm","dateAndTime","moment","format","WordCountTable","Table","celled","HeaderCell","singleLine","map","Body","Cell","WordCountComponent","useEffect","WordBankListItem","border","word_name","Content","WordBankList","key","display","data-placeholder","floated","styles","container","buttons","play","hover","button","cursor","pointerEvents","outline","borderStyle","pause","stop","resume","voice","lang","displayText","textAsButton","rate","token","finally","path","WordBankComponent","Boolean","window","location","hostname","match","withRouter","children","pathname","scrollTo","dateFnsLocalizer","createBrowserHistory","ReactDOM","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.ec9ef593.chunk.js","sourcesContent":["import axios from \"axios\";\nimport { toast } from \"react-toastify\";\nimport { history } from \"../../index\";\n\n// Base URL to ping the server/backend\naxios.defaults.baseURL = `http://localhost:8000/api`;\n\n// User login - JWT token\n// E.g. When a user logins, save the JWT token in the cookies\n// axios.interceptors.request.use(\n//   (config) => {\n//     const token = window.localStorage.getItem(\"jwt\");\n//     if (token) config.headers.Authorization = `Token: ${token}`;\n//     return config;\n//   },\n//   (error) => {\n//     return Promise.reject(error);\n//   }\n// );\n\n//Error handling - 4xx or 5xx errors\naxios.interceptors.response.use(undefined, (error) => {\n  const { status, data, config } = error;\n  console.log(JSON.stringify(error, null, \"\\t\")); // printing out the error message nicely\n  if (error.message === \"Network error\" && error.response === undefined) {\n    toast.error(\"Network error\");\n  }\n  if (status === 404) {\n    history.push(\"/notfound\");\n  }\n  if (\n    status === 400 &&\n    config.method === \"get\"\n    // data.errors.hasOwnProperty(\"id\")\n  ) {\n    history.push(\"/notfound\");\n  }\n\n  if (status === 500) {\n    toast.error(\"Server error - check the terminal for more info\");\n  }\n  throw error.response;\n});\n\n// Response/Packets of data retrieved from the backend\nconst responseBody = (response) => response.data;\n\n// Object of the Axios Requests\nconst requests = {\n  get: (url) => axios.get(url).then(responseBody),\n  post: (url, body) => axios.post(url, body).then(responseBody),\n  put: (url, body) => axios.put(url, body).then(responseBody),\n  delete: (url) => axios.delete(url).then(responseBody),\n};\n\n// Object of User requests\nconst User = {\n  current: () => requests.get(\"/user\"),\n  login: (user) => {\n    requests.post(`/login`, user);\n  },\n  register: (user) => {\n    console.log(user);\n    requests.post(`/register`, user);\n  },\n};\n\n// Object of word bank\nconst WordBank = {\n  list: () => requests.get(`/allWord`),\n  details: (id) => requests.get(`/findById/${id}`),\n  categories: () => requests.get(`/categories`),\n\n};\n\n// Object of word count\nconst WordCount = {\n  list: () => requests.get(`/wordcount`),\n  add: (sentence) => requests.post(`/wordcount/add`, sentence),\n};\n\nexport default {\n  User,\n  WordBank,\n  WordCount,\n};\n","import { decorate, observable, action, computed, runInAction } from \"mobx\";\nimport agent from \"../api/agent\";\nimport { history } from \"../../index\";\n\nexport default class UserStore {\n  constructor(rootStore) {\n    this.rootStore = rootStore;\n  }\n  user = null;\n\n  get isLoggedIn() {\n    return !!this.user;\n  }\n\n  login = async (values) => {\n    try {\n      const user = await agent.User.login(values);\n      console.log(\"user from userStore: \", user);\n      runInAction(() => {\n        this.user = user;\n        history.push(\"/wordbank\");\n      });\n      // this.rootStore.commonStore.setToken(user.token);\n    } catch (error) {\n      throw error;\n    }\n  };\n\n  register = async (values) => {\n    try {\n      const user = await agent.User.register(values);\n      // this.rootStore.commonStore.setToken(user.token);\n      runInAction(() => {\n        this.user = user;\n        history.push(\"/wordbank\");\n      });\n    } catch (error) {\n      throw error;\n    }\n  };\n\n  getUser = async () => {\n    try {\n      const user = await agent.User.current();\n      runInAction(() => {\n        this.user = user;\n      });\n    } catch (error) {\n      console.log(error);\n    }\n  };\n\n  logout = () => {\n    // this.rootStore.commonStore.setToken(null);\n    this.user = null;\n    history.push(\"/\");\n  };\n}\n\ndecorate(UserStore, {\n  user: observable,\n  login: action,\n  register: action,\n  getUser: action,\n  logout: action,\n  isLoggedIn: computed,\n});\n","// Assign a color based on the category of a word\nexport const categoryToColor = {\n  adjectives: \"#91DCE2\",\n  interjections: \"#5ED2DA\",\n  nouns: \"#5BC4E2\",\n  prepositions: \"#6EABE7\",\n  pronouns: \"#7B95E6\",\n  verbs: \"#8091CD\",\n};\n\n// export const combinedDateAndTime = (date) => {\n//   const year = date.getFullYear();\n//   const month = date.getMonth() + 1;\n//   const day = date.getDate();\n//   const dateString = `${year}-${month}-${day}`;\n//   return new Date(dateString + \" \" + \"00:00:00\");\n// };\n\nexport const matchCategoryToIdx = (word, categories) => {\n  word.category = categories[word.category_idx - 1].category_name;\n  return word;\n};\n","import { decorate, observable, action, runInAction, computed } from \"mobx\";\nimport agent from \"../api/agent\";\nimport { toast } from \"react-toastify\";\nimport { matchCategoryToIdx } from \"../../app/common/util/util.js\";\n\nexport default class WordStore {\n  constructor(rootStore) {\n    this.rootStore = rootStore;\n  }\n  loading = false;\n  wordRegistry = new Map();\n  word = null;\n  wordCountRegistry = [];\n  categories = [];\n\n  loadCategories = async () => {\n    try {\n      const categoriesFromBackEnd = await agent.WordBank.categories();\n      this.categories = categoriesFromBackEnd.data;\n      runInAction(\"loading categories\", () => {});\n    } catch (error) {\n      toast.error(\"Cannot retrieve/match categories\");\n    }\n  };\n\n  loadWords = async () => {\n    this.loading = true;\n    try {\n      this.loadCategories();\n      const wordBank = await agent.WordBank.list();\n      runInAction(\"loading words\", () => {\n        wordBank.data.forEach((word) => {\n          word = matchCategoryToIdx(word, this.categories);\n          this.wordRegistry.set(word.word_idx, word);\n        });\n        this.loading = false;\n      });\n    } catch (error) {\n      runInAction(\"load words error\", () => {\n        this.loading = false;\n      });\n    }\n  };\n\n  get wordsByCategories() {\n    const words = this.groupWordsByCategory(\n      Array.from(this.wordRegistry.values())\n    );\n    // console.log(words);\n    // let newWords = [words[1], words[4], words[5], words[3], words[0], words[2]]\n    return words;\n  }\n\n  groupWordsByCategory(words) {\n    // sorts all words and reduces them into categories\n    const wordsSorted = words.sort((a, b) => {\n      return a.category.localeCompare(b.category);\n    });\n\n    return Object.entries(\n      wordsSorted.reduce((words, word) => {\n        const category = word.category;\n        words[category] = words[category] ? [...words[category], word] : [word];\n        return words;\n      }, {})\n    );\n  }\n\n  loadWord = async (id) => {\n    let word = this.getWord(id);\n    if (word) {\n      this.word = word;\n      return word;\n    } else {\n      this.loading = true;\n      let word = await agent.WordBank.details(id);\n      try {\n        runInAction(\"getting word\", () => {\n          this.word = word;\n          this.wordRegistry.set(word.id, word);\n          this.loading = false;\n        });\n      } catch (error) {\n        runInAction(\"get word error\", () => {\n          this.loading = false;\n        });\n        console.log(error);\n      }\n    }\n  };\n\n  getWord = (id) => {\n    return this.wordRegistry.get(id);\n  };\n\n  clearWord = () => {\n    this.word = null;\n  };\n\n  loadWordCount = async () => {\n    try {\n      if (this.rootStore.userStore.user) {\n        try {\n          const wordCount = await agent.wordCount.list();\n          runInAction(\"loading words\", () => {\n            wordCount.forEach((word) => {\n              this.wordCountRegistry.set(word, wordCount);\n            });\n          });\n        } catch (error) {\n          runInAction(\"load word count error\", () => {});\n          console.log(error);\n        }\n      }\n    } catch (error) {\n      toast.error(\"Please log in or register to find out your word stats\");\n    }\n  };\n}\ndecorate(WordStore, {\n  wordRegistry: observable,\n  word: observable,\n  loading: observable,\n  loadWords: action,\n  loadWord: action,\n  clearWord: action,\n  loadWordCount: action,\n  wordCountRegistry: observable,\n  wordsByCategories: computed,\n  loadCategories: action,\n  categories: observable,\n});\n","import { decorate, observable, action } from \"mobx\";\n\nexport default class CommonStore {\n  constructor(rootStore) {\n    this.rootStore = rootStore;\n\n    // reaction(\n    //   () => this.token,\n    //   (token) => {\n    //     if (token) {\n    //       window.localStorage.setItem(\"jwt\", token);\n    //     } else {\n    //       window.localStorage.removeItem(\"jwt\");\n    //     }\n    //   }\n    // );\n  }\n\n  // token = window.localStorage.getItem(\"jwt\");\n  appLoaded = false;\n\n  // setToken = (token) => {\n  //   window.localStorage.setItem(\"jwt\", token);\n  //   this.token = token;\n  // };\n\n  setAppLoaded = () => {\n    this.appLoaded = true;\n  };\n}\n\ndecorate(CommonStore, {\n  // token: observable,\n  appLoaded: observable,\n  setAppLoaded: action,\n  // setToken: action,\n});\n","import { decorate, observable, action } from \"mobx\";\nimport agent from \"../api/agent\";\nimport { toast } from \"react-toastify\";\n\nexport default class SentenceStore {\n  constructor(rootStore) {\n    this.rootStore = rootStore;\n  }\n  sentence = \"\";\n\n  addToSentence = (word) => {\n    // console.log(word);\n    this.sentence += word + \" \";\n  };\n\n  clearSentence = () => {\n    this.sentence = \"\";\n  };\n\n  addWordCount = async () => {\n    try {\n      await agent.WordCount.add(this.sentence);\n      // runInAction(\"adding word count\", () => {\n      // });\n    } catch (error) {\n      console.log(error);\n      toast.error(\"Error adding to your word stats\");\n    }\n  };\n}\ndecorate(SentenceStore, {\n  sentence: observable,\n  addToSentence: action,\n  clearSentence: action,\n  addWordCount: action,\n});\n","import { createContext } from \"react\";\nimport UserStore from \"./userStore\";\nimport WordStore from \"./wordStore\";\nimport CommonStore from \"./commonStore\";\nimport SentenceStore from \"./sentenceStore\";\n\nexport default class RootStore {\n  constructor() {\n    this.userStore = new UserStore(this);\n    this.wordStore = new WordStore(this);\n    this.commonStore = new CommonStore(this);\n    this.SentenceStore = new SentenceStore(this);\n  }\n}\n\nexport const RootStoreContext = createContext(new RootStore());\n","import React from \"react\";\nimport { Message } from \"semantic-ui-react\";\n\nconst ErrorMessage = ({ error, text }) => {\n  return (\n    <Message error>\n      <Message.Header>{error.statusText}</Message.Header>\n      {text && <Message content={text} />}\n    </Message>\n  );\n};\n\nexport default ErrorMessage;\n","import React from \"react\";\nimport { Form, Label } from \"semantic-ui-react\";\n\nconst TextInput = ({\n  input,\n  width,\n  type,\n  placeholder,\n  meta: { touched, error },\n  label,\n}) => {\n  return (\n    <Form.Field error={touched && !!error} type={type} width={width} inline>\n      <label>{label}</label>\n      <Form.Input {...input} placeholder={placeholder} fluid focus />\n      {touched && error && (\n        <Label basic color=\"red\">\n          {error}\n        </Label>\n      )}\n    </Form.Field>\n  );\n};\n\nexport default TextInput;\n","import React, { useContext } from \"react\";\nimport { Button, Form, Header, Message, Container } from \"semantic-ui-react\";\nimport { RootStoreContext } from \"../../app/stores/rootStore\";\nimport {\n  combineValidators,\n  isRequired,\n  createValidator,\n  composeValidators,\n} from \"revalidate\";\nimport { Form as FinalForm, Field } from \"react-final-form\";\nimport { FORM_ERROR } from \"final-form\";\nimport ErrorMessage from \"../../app/common/form/ErrorMessage\";\nimport TextInput from \"../../app/common/form/TextInput\";\n\nconst isValidEmail = createValidator(\n  (message) => (value) => {\n    if (value && !/^[A-Z0-9._%+-]+@[A-Z0-9.-]+\\.[A-Z]{2,4}$/i.test(value)) {\n      return message;\n    }\n  },\n  \"Invalid email address\"\n);\n\nconst validate = combineValidators({\n  email: composeValidators(isRequired(\"Email\"), isValidEmail)(),\n  password: isRequired(\"Password\"),\n});\n\nconst LoginForm = () => {\n  const rootStore = useContext(RootStoreContext);\n  const { login } = rootStore.userStore;\n\n  return (\n    <Container style={{ marginTop: \"5em\" }}>\n      <FinalForm\n        onSubmit={(values) =>\n          login(values).catch((error) => ({\n            [FORM_ERROR]: error,\n          }))\n        }\n        validate={validate}\n        render={({\n          handleSubmit,\n          submitting,\n          submitError,\n          invalid,\n          pristine,\n          dirtySinceLastSubmit,\n        }) => (\n          <Form onSubmit={handleSubmit} error>\n            <Header\n              as=\"h2\"\n              content=\"Login to miah\"\n              style={{ color: \"#9AADED\" }}\n              textAlign=\"center\"\n            />\n            <Field\n              name=\"email\"\n              component={TextInput}\n              placeholder=\"Email\"\n              type=\"email\"\n            />\n            <Field\n              name=\"password\"\n              component={TextInput}\n              placeholder=\"Password\"\n              type=\"password\"\n            />\n            <Button\n              disabled={(invalid && !dirtySinceLastSubmit) || pristine}\n              loading={submitting}\n              style={{ backgroundColor: \"#D2D0FE\", color: \"white\" }}\n              content=\"Login\"\n              fluid\n            />\n            {submitError && !dirtySinceLastSubmit && (\n              <ErrorMessage\n                error={submitError}\n                text=\"Invalid email or password\"\n              />\n            )}\n            <Message style={{ backgroundColor: \"#9AADED\", color: \"white\" }}>\n              Haven't registered yet? <a href=\"/register\">Sign Up</a>\n            </Message>\n          </Form>\n        )}\n      />\n    </Container>\n  );\n};\n\nexport default LoginForm;\n","import React, { useContext, useState } from \"react\";\nimport { Menu, Dropdown, Button, Segment, Image } from \"semantic-ui-react\";\nimport { observer } from \"mobx-react-lite\";\nimport { NavLink } from \"react-router-dom\";\nimport { RootStoreContext } from \"../../app/stores/rootStore\";\n\nconst NavBar = () => {\n  const rootStore = useContext(RootStoreContext);\n  const { user, logout } = rootStore.userStore;\n\n  const [activeItem, setActiveItem] = useState(\"home\");\n  const handleItemClick = (e, { name }) => {\n    setActiveItem(name);\n  };\n\n  return (\n    <Segment>\n      <Menu fixed=\"top\" inverted size=\"huge\">\n        <Menu.Item\n          header\n          as={NavLink}\n          exact\n          to=\"/\"\n          active={activeItem === \"home\"}\n          name=\"home\"\n          onClick={handleItemClick}\n          style={{ marginLeft: \"1em\" }}\n        >\n          <Image\n            size=\"mini\"\n            src=\"/assets/logo.jpg\"\n            alt=\"miah\"\n            circular\n            spaced=\"right\"\n          />\n          miah\n        </Menu.Item>\n        {user ? (\n          <Menu.Menu>\n            <Menu.Item\n              as={NavLink}\n              to=\"/wordcount\"\n              active={activeItem === \"wordcount\"}\n              name=\"wordcount\"\n              onClick={handleItemClick}\n            >\n              Your Stats\n            </Menu.Item>\n            <Menu.Item\n              as={NavLink}\n              to=\"/wordbank\"\n              active={activeItem === \"wordbank\"}\n              name=\"\"\n              onClick={handleItemClick}\n            >\n              Word Bank\n            </Menu.Item>\n            <Menu.Item position=\"right\">\n              <Dropdown pointing=\"top left\" text={user.displayName}>\n                <Dropdown.Menu>\n                  {/* <Dropdown.Item\n                      as={Link}\n                      to={`/profile/${user.username}`}\n                      text=\"My profile\"\n                      icon=\"user\"\n                    /> */}\n                  <Dropdown.Item onClick={logout} text=\"Logout\" icon=\"power\" />\n                </Dropdown.Menu>\n              </Dropdown>\n            </Menu.Item>\n          </Menu.Menu>\n        ) : (\n          <Menu.Item position=\"right\">\n            <Button\n              as={NavLink}\n              to=\"/wordbank\"\n              style={{ backgroundColor: \"white\", marginLeft: \"2em\" }}\n              compact\n            >\n              Discover\n            </Button>\n            <Button\n              as={NavLink}\n              to=\"/login\"\n              style={{ backgroundColor: \"white\", marginLeft: \"2em\" }}\n              compact\n            >\n              Log in\n            </Button>\n            <Button\n              as={NavLink}\n              to=\"/register\"\n              compact\n              style={{ backgroundColor: \"white\", marginLeft: \"2em\" }}\n            >\n              Sign Up\n            </Button>\n          </Menu.Item>\n        )}\n      </Menu>\n    </Segment>\n  );\n};\n\nexport default observer(NavBar);\n","import React from \"react\";\nimport { Dimmer, Loader } from \"semantic-ui-react\";\n\nconst LoadingComponent = ({ inverted = true, content }) => {\n  return (\n    <Dimmer active inverted={inverted}>\n      <Loader content={content} />\n    </Dimmer>\n  );\n};\n\nexport default LoadingComponent;\n","import React from 'react';\nimport { Header, Grid, Image } from 'semantic-ui-react';\n\nconst HomePageHeader = () => {\n  return (\n    <Grid padded relaxed={true}>\n      <Grid.Row centered>\n        <Grid.Column width={8} textAlign=\"center\" verticalAlign=\"middle\">\n          <Header style={{ fontSize: '4em' }}>meet miah</Header>\n          <Header as=\"h1\">ML-Informed AAC Helper</Header>\n          <Header as=\"h3\">\n            {' '}\n            miah (ML-Informed AAC Helper) is a state-of-the-art augmentative and\n            alternative communication (AAC) tool to aid the speech impaired. By\n            leveraging machine learning, the mission of miah is to provide\n            equitable speech solutions and actionable data-driven insights for\n            all users.{' '}\n          </Header>\n        </Grid.Column>\n        <Grid.Column width={4} verticalAlign=\"top\">\n          <Image src=\"client/public/assets/iphone-miah.png\" size=\"medium\" />\n        </Grid.Column>\n      </Grid.Row>\n    </Grid>\n  );\n};\n\nexport default HomePageHeader;\n","import React from \"react\";\nimport { Header, Grid, Button } from \"semantic-ui-react\";\nimport { Link } from \"react-router-dom\";\n\nconst HomePageInfo = () => {\n  return (\n    <Grid style={{ margin: \"2em 0\" }} centered={true}>\n      <Header as=\"h2\">How miah works</Header>\n      <Grid.Row columns={5}>\n        <Grid.Column>\n          <Header>Log In</Header>\n          <p>\n            Log in to miah to access our word bank. If you are a new user,\n            create an account!\n          </p>\n        </Grid.Column>\n        <Grid.Column>\n          <Header>Communicate</Header>\n          <p>Our interactive word bank will help you communicate with ease!</p>\n        </Grid.Column>\n        <Grid.Column>\n          <Header>Track*</Header>\n          <p>\n            Follow your progress and the number of times you've used each word\n            in your user profile.\n          </p>\n          <p>*To be added!</p>\n        </Grid.Column>\n      </Grid.Row>\n      <Grid.Row>\n        <Button\n          size=\"massive\"\n          style={{\n            backgroundColor: \"#7A93E5\",\n            padding: \".78571429em 7em\",\n            color: \"white\",\n          }}\n          as={Link}\n          to=\"/register\"\n        >\n          Get Started!\n        </Button>\n      </Grid.Row>\n    </Grid>\n  );\n};\n\nexport default HomePageInfo;\n","import React from \"react\";\nimport { Segment } from \"semantic-ui-react\";\n\nconst Footer = () => {\n  return (\n    <Segment\n      style={{\n        backgroundColor: \"#929292\",\n        position: \"absolute\",\n        width: \"100%\",\n        top: \"93.3%\",\n      }}\n    >\n      Info and what not\n    </Segment>\n  );\n};\n\nexport default Footer;\n","import React, { Fragment } from \"react\";\nimport { Segment } from \"semantic-ui-react\";\nimport HomePageHeader from \"./HomePageHeader\";\nimport HomePageInfo from \"./HomePageInfo\";\nimport Footer from \"../footer/Footer\";\n\nconst HomePage = () => {\n  return (\n    <Fragment>\n      <Segment className=\"masthead\" textAlign=\"center\">\n        <HomePageHeader />\n      </Segment>\n      <HomePageInfo />\n      <Footer />\n    </Fragment>\n  );\n};\n\nexport default HomePage;\n","import React from \"react\";\nimport { Segment, Button, Header, Icon } from \"semantic-ui-react\";\nimport { Link } from \"react-router-dom\";\n\nconst NotFound = () => {\n  return (\n    <Segment placeholder style={{ paddingTop: \"10em\", paddingBottom: \"10em\" }}>\n      <Header icon>\n        <Icon name=\"search\" />\n        Oops - We've looked everywhere but couldn't find this.\n      </Header>\n      <Segment.Inline>\n        <Button as={Link} to=\"/home\" primary>\n          Return to Home\n        </Button>\n      </Segment.Inline>\n    </Segment>\n  );\n};\n\nexport default NotFound;\n","import React from \"react\";\nimport { Form, Label } from \"semantic-ui-react\";\nimport { DateTimePicker } from \"react-widgets\";\nimport \"react-widgets/dist/css/react-widgets.css\";\n\nlet formats = [\"dd MM yyyy\"];\n\nconst DateInput = ({ input, placeholder, meta: { touched, error } }) => {\n  return (\n    <Form.Field error={touched && !!error} parse={formats}>\n      <DateTimePicker\n        placeholder={placeholder}\n        value={input.value || null}\n        onChange={input.onChange}\n        onBlur={input.onBlur}\n        time={false}\n        max={new Date()}\n      />\n      {touched && error && (\n        <Label basic color=\"red\">\n          {error}\n        </Label>\n      )}\n    </Form.Field>\n  );\n};\n\nexport default DateInput;","import React, { useContext } from \"react\";\nimport { Form as FinalForm, Field } from \"react-final-form\";\nimport { Form, Button, Header, Container, Message } from \"semantic-ui-react\";\nimport TextInput from \"../../app/common/form/TextInput\";\nimport { RootStoreContext } from \"../../app/stores/rootStore\";\n// import { FORM_ERROR } from \"final-form\";\nimport {\n  combineValidators,\n  isRequired,\n  createValidator,\n  composeValidators,\n} from \"revalidate\";\nimport ErrorMessage from \"../../app/common/form/ErrorMessage\";\nimport DateInput from \"../../app/common/form/DateInput\";\n// import { combinedDateAndTime } from \"../../app/common/util/util\";\nimport moment from \"moment\";\n\nconst isValidEmail = createValidator(\n  (message) => (value) => {\n    if (value && !/^[A-Z0-9._%+-]+@[A-Z0-9.-]+\\.[A-Z]{2,4}$/i.test(value)) {\n      return message;\n    }\n  },\n  \"Invalid email address\"\n);\n\nconst validate = combineValidators({\n  first_name: isRequired(\"first_name\"),\n  last_name: isRequired(\"last_name\"),\n  dob: isRequired(\"dob\"),\n  email: composeValidators(isRequired(\"Email\"), isValidEmail)(),\n  password: isRequired(\"password\"),\n});\n\nconst RegisterForm = () => {\n  const rootStore = useContext(RootStoreContext);\n  const { register } = rootStore.userStore;\n\n  const handleFinalFormSubmit = (values) => {\n    // const dateAndTime = combinedDateAndTime(values.dob);\n    const dateAndTime = moment(values.dob).format(\"YYYY-MM-DD\");\n    values.dob = dateAndTime;\n    register(values);\n  };\n\n  return (\n    <Container style={{ marginTop: \"5em\" }}>\n      <FinalForm\n        // onSubmit={(values) =>\n        //   register(values).catch((error) => ({\n        //     [FORM_ERROR]: error,\n        //   }))\n        // }\n        validate={validate}\n        onSubmit={handleFinalFormSubmit}\n        render={({\n          handleSubmit,\n          submitting,\n          submitError,\n          invalid,\n          pristine,\n          dirtySinceLastSubmit,\n        }) => (\n          <Form onSubmit={handleSubmit} error>\n            <Header\n              as=\"h2\"\n              content=\"Sign up to miah\"\n              style={{ color: \"#9AADED\" }}\n              textAlign=\"center\"\n            />\n            <Field\n              name=\"first_name\"\n              component={TextInput}\n              placeholder=\"First Name\"\n              type=\"text\"\n            />\n            <Field\n              name=\"last_name\"\n              component={TextInput}\n              placeholder=\"Last Name\"\n              type=\"text\"\n            />\n            <Field\n              name=\"dob\"\n              placeholder=\"Date Of Birth\"\n              component={DateInput}\n            />\n            <Field\n              name=\"email\"\n              component={TextInput}\n              placeholder=\"Email\"\n              type=\"email\"\n            />\n            <Field\n              name=\"password\"\n              component={TextInput}\n              placeholder=\"Password\"\n              type=\"password\"\n            />\n            {submitError && !dirtySinceLastSubmit && (\n              <ErrorMessage error={submitError} />\n            )}\n            <Button\n              disabled={(invalid && !dirtySinceLastSubmit) || pristine}\n              loading={submitting}\n              style={{ backgroundColor: \"#D2D0FE\", color: \"white\" }}\n              content=\"Sign Up\"\n              fluid\n            />\n            <Message style={{ backgroundColor: \"#9AADED\", color: \"white\" }}>\n              Have an account? <a href=\"/login\">Login</a>\n            </Message>\n          </Form>\n        )}\n      />\n    </Container>\n  );\n};\n\nexport default RegisterForm;\n","import React, { useContext } from \"react\";\nimport { RootStoreContext } from \"../../app/stores/rootStore\";\nimport { Table, Container, Segment } from \"semantic-ui-react\";\n\nconst WordCountTable = () => {\n  const rootStore = useContext(RootStoreContext);\n  const { wordCountRegistry } = rootStore.wordStore;\n\n  return (\n    <Container>\n      {wordCountRegistry ? (\n        <Table celled padded>\n          <Table.Header>\n            <Table.Row>\n              <Table.HeaderCell singleLine>Word</Table.HeaderCell>\n              <Table.HeaderCell>Word Count</Table.HeaderCell>\n            </Table.Row>\n          </Table.Header>\n          {wordCountRegistry.map((word) => (\n            <Table.Body>\n              <Table.Cell>{word.name}</Table.Cell>\n              <Table.Cell>{word.wordCount}</Table.Cell>\n            </Table.Body>\n          ))}\n        </Table>\n      ) : (\n        <Segment>Start using the app!</Segment>\n      )}\n    </Container>\n  );\n};\n\nexport default WordCountTable;\n","import React, { useContext, useEffect } from \"react\";\nimport { RootStoreContext } from \"../../app/stores/rootStore\";\nimport { Segment, Container } from \"semantic-ui-react\";\nimport WordCountTable from \"./WordCountTable\";\n\nconst WordCountComponent = () => {\n  const rootStore = useContext(RootStoreContext);\n  const { user } = rootStore.userStore;\n  const { loadWordCount } = rootStore.wordStore;\n\n  useEffect(() => {\n    if (user) loadWordCount();\n  }, [user, loadWordCount]);\n\n  return (\n    <Container style={{ marginTop: \"5em\" }}>\n      {user ? <WordCountTable /> : <Segment>User not logged in</Segment>}\n    </Container>\n  );\n};\n\nexport default WordCountComponent;\n","import React, { useContext } from \"react\";\nimport { Image, Button } from \"semantic-ui-react\";\nimport { categoryToColor } from \"../../app/common/util/util\";\nimport { RootStoreContext } from \"../../app/stores/rootStore\";\n\nconst WordBankListItem = ({ word }) => {\n  const rootStore = useContext(RootStoreContext);\n  const { addToSentence } = rootStore.SentenceStore;\n\n  return (\n    <Button\n      style={{\n        backgroundColor: categoryToColor[word.category],\n        margin: \"1em\",\n        border: \"1px black solid\",\n      }}\n      onClick={() => addToSentence(word.word_name)}\n      size=\"mini\"\n    >\n      <Button.Content>{word.word_name}</Button.Content>\n      <Image\n        src={`/assets/word-bank/${word.category}/${word.word_name}.png`}\n        size=\"mini\"\n        circular\n        centered\n      />\n    </Button>\n  );\n};\n\nexport default WordBankListItem;\n","import React, { useContext } from \"react\";\nimport { RootStoreContext } from \"../../app/stores/rootStore\";\nimport { Button } from \"semantic-ui-react\";\nimport WordBankListItem from \"./WordBankListItem\";\nimport { Grid } from \"semantic-ui-react\";\nimport { categoryToColor } from \"../../app/common/util/util\";\n\nconst WordBankList = () => {\n  const rootStore = useContext(RootStoreContext);\n  const { wordsByCategories } = rootStore.wordStore;\n  return (\n    <Grid centered>\n      {wordsByCategories.map(([category, words]) => (\n        <Grid.Column width={2} key={category}>\n          <Button\n            style={{\n              display: \"block\",\n              backgroundColor: categoryToColor[category],\n            }}\n            size=\"medium\"\n            fluid\n          >\n            {category}\n          </Button>\n          {words.map((word) => (\n            <WordBankListItem word={word} />\n          ))}\n        </Grid.Column>\n      ))}\n    </Grid>\n  );\n};\n\nexport default WordBankList;\n","import React from \"react\";\nimport { observer } from \"mobx-react-lite\";\nimport { useContext } from \"react\";\nimport { RootStoreContext } from \"../../app/stores/rootStore\";\nimport { Button, Container } from \"semantic-ui-react\";\nimport Speech from \"react-speech\";\n\nconst WordBankSentence = () => {\n  const rootStore = useContext(RootStoreContext);\n  const { sentence, clearSentence, addWordCount } = rootStore.SentenceStore;\n\n  const style = {\n    container: {},\n    text: {},\n    buttons: {},\n    play: {\n      hover: {},\n      button: {\n        cursor: \"pointer\",\n        pointerEvents: \"none\",\n        outline: \"none\",\n        borderStyle: \"none\",\n      },\n    },\n    pause: {\n      hover: {},\n      button: {},\n    },\n    stop: {\n      hover: {},\n      button: {},\n    },\n    resume: {\n      hover: {},\n      button: {},\n    },\n  };\n\n  return (\n    <Container text>\n      <p className=\"sentence_block\" data-placeholder=\"Click icons below...\">\n        {sentence}\n      </p>\n      <Button floated=\"left\" color=\"red\" inverted onClick={clearSentence}>\n        Clear\n      </Button>\n      <Button floated=\"right\" color=\"blue\" inverted>\n        {\" \"}\n        <Speech\n          styles={style}\n          text={sentence}\n          voice={\"Daniel\"}\n          lang={\"en-US\"}\n          displayText={\"Speak\"}\n          textAsButton={true}\n          onClick={addWordCount}\n          rate=\"0.5\"\n        />\n      </Button>\n    </Container>\n  );\n};\n\nexport default observer(WordBankSentence);\n","import React, { useContext, useEffect } from \"react\";\nimport { RootStoreContext } from \"../../app/stores/rootStore\";\nimport { Grid } from \"semantic-ui-react\";\nimport LoadingComponent from \"../../app/layout/LoadingComponent\";\nimport { observer } from \"mobx-react-lite\";\nimport WordBankList from \"./WordBankList\";\nimport WordBankSentence from \"./WordBankSentence\";\n\nconst WordBankComponent = () => {\n  const rootStore = useContext(RootStoreContext);\n  // const { user } = rootStore.userStore;\n  const { loadWords, loading } = rootStore.wordStore;\n\n  useEffect(() => {\n    loadWords();\n  }, [loadWords]);\n\n  if (loading) return <LoadingComponent content=\"Loading word bank...\" />;\n  return (\n    <Grid style={{ marginTop: \"5em\" }}>\n      <Grid.Column width={16}>\n        <WordBankSentence />\n      </Grid.Column>\n      <Grid.Column width={16}>\n        <WordBankList />\n      </Grid.Column>\n    </Grid>\n  );\n};\n\nexport default observer(WordBankComponent);\n","import React, { useContext, useEffect, Fragment } from \"react\";\nimport LoginForm from \"../../features/user/LoginForm\";\nimport NavBar from \"../../features/navbar/NavBar\";\nimport LoadingComponent from \"./LoadingComponent\";\nimport { RootStoreContext } from \"../stores/rootStore\";\nimport { Route, Switch } from \"react-router-dom\";\nimport { observer } from \"mobx-react-lite\";\nimport HomePage from \"../../features/home/HomePage\";\nimport NotFound from \"./NotFound\";\nimport RegisterForm from \"../../features/user/RegisterForm\";\nimport WordCountComponent from \"../../features/word-count/WordCountComponent\";\nimport WordBankComponent from \"../../features/word-bank/WordBankComponent.jsx\";\n\nconst App = () => {\n  const rootStore = useContext(RootStoreContext);\n  const { setAppLoaded, token, appLoaded } = rootStore.commonStore;\n  const { getUser } = rootStore.userStore;\n\n  useEffect(() => {\n    if (token) {\n      getUser().finally(() => setAppLoaded());\n    } else {\n      setAppLoaded();\n    }\n  }, [getUser, setAppLoaded, token]);\n  if (!appLoaded) return <LoadingComponent content=\"Loading miah...\" />;\n\n  return (\n    <Fragment>\n      <Fragment>\n        <NavBar />\n        <Switch>\n          <Route exact path=\"/\" component={HomePage} />\n          <Route path=\"/login\" component={LoginForm} />\n          <Route path=\"/register\" component={RegisterForm} />\n          <Route path=\"/wordbank\" component={WordBankComponent} />\n          <Route path=\"/wordcount\" component={WordCountComponent} />\n          <Route component={NotFound} />\n        </Switch>\n      </Fragment>\n    </Fragment>\n  );\n};\n\nexport default observer(App);\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import { useEffect } from \"react\";\nimport { withRouter } from \"react-router-dom\";\n\nconst ScrollToTop = ({ children, location: { pathname } }) => {\n  useEffect(() => {\n    window.scrollTo(0, 0);\n  }, [pathname]);\n\n  return children || null;\n};\n\nexport default withRouter(ScrollToTop);\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './app/layout/App';\nimport * as serviceWorker from './serviceWorker';\nimport { HashRouter as Router } from 'react-router-dom';\nimport { createBrowserHistory } from 'history';\nimport './app/layout/App.css';\nimport ScrollToTop from './app/layout/ScrollToTop';\nimport dateFnsLocalizer from 'react-widgets-date-fns';\n\ndateFnsLocalizer();\nexport const history = createBrowserHistory();\n\nReactDOM.render(\n  <Router history={history}>\n    <ScrollToTop>\n      <App />\n    </ScrollToTop>\n  </Router>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}